import { NextRequest, NextResponse } from "next/server";
import dbQuery from "@/lib/dbQuery";

export async function GET(request: NextRequest) {
    const { searchParams } = new URL(request.url);
    const idContrato = searchParams.get("idContrato");

    const query1 = `SELECT 
                      CASE WHEN A.ID_TIPO_MOVIMIENTO=3 THEN (SELECT TO_CHAR(FECHA_MOVIMIENTO,'DD/MM/YYYY') FROM MOVIMIENTOS_DETALLE WHERE ID_CONTRATO=B.ID_CONTRATO AND ID_TIPO_MOVIMIENTO=2 AND BND_ACTIVO=TRUE AND NO_PAGO=A.NO_PAGO)
                          WHEN A.ID_TIPO_MOVIMIENTO=12 THEN (SELECT TO_CHAR(FECHA_MOVIMIENTO,'DD/MM/YYYY') FROM MOVIMIENTOS_DETALLE WHERE ID_CONTRATO=B.ID_CONTRATO AND ID_TIPO_MOVIMIENTO=1 AND BND_ACTIVO=TRUE) END AS FECHA_MOVIMIENTO
                      ,TO_CHAR(A.FECHA_MOVIMIENTO,'DD/MM/YYYY') AS FECHA_PAGO,MONTO AS MONTO_PAGADO,NO_PAGO,ID_TIPO_MOVIMIENTO,CONCAT(E.NOMENCLATURA,'-',A.NO_RECIBO ) AS RECIBO
                      ,(SELECT COALESCE(SUM(MONTO),0) FROM MOVIMIENTOS_DETALLE WHERE BND_ACTIVO=TRUE AND ID_TIPO_MOVIMIENTO=8 AND NO_PAGO=A.NO_PAGO AND ID_CONTRATO=A.ID_CONTRATO) AS INTERESES
                      ,(SELECT COALESCE(SUM(MONTO),0) FROM MOVIMIENTOS_DETALLE WHERE BND_ACTIVO=TRUE AND ID_TIPO_MOVIMIENTO IN (5,6) AND NO_PAGO=A.NO_PAGO AND ID_CONTRATO=A.ID_CONTRATO) AS DESCUENTOS
                      FROM MOVIMIENTOS_DETALLE A
                      INNER JOIN CONTRATOS_TERRENOS B ON B.ID_CONTRATO=A.ID_CONTRATO
                      INNER JOIN CAT_TERRENOS C ON C.ID_TERRENO=B.ID_TERRENO
                      INNER JOIN CAT_MANZANAS D ON D.ID_MANZANA=C.ID_MANZANA
                      INNER JOIN CAT_FRACCIONAMIENTOS E ON E.ID_FRACCIONAMIENTO=D.ID_FRACCIONAMIENTO
                      WHERE A.ID_CONTRATO=${idContrato}
                      AND A.ID_TIPO_MOVIMIENTO IN (3,12)
                      AND A.BND_ACTIVO=TRUE
    `;
    const datosGenerales = await dbQuery(query1);
    return NextResponse.json(datosGenerales.rows, { status: 200 });
}
